pipeline {
    agent any

    environment {
        GIT_REPO_URL = 'https://github.com/Bhargavreddysudha/simple-maven.git'
        GIT_BRANCH = 'main'
        SONARQUBE_SERVER = 'http://52.87.243.220:9000/'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: "*/${GIT_BRANCH}"]], 
                          userRemoteConfigs: [[url: "${GIT_REPO_URL}"]]])
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def mvn = tool 'Maven'

                    withCredentials([string(credentialsId: 'Sonar-Jenkins', variable: 'SONARQUBE_TOKEN')]) {
                        withSonarQubeEnv(credentialsId: 'Sonar-Jenkins', installationName: 'SonarQube') {
                            sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=Java-Code"
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'Sonar-Jenkins', variable: 'SONARQUBE_TOKEN')]) {
                        def analysisIdResponse = sh(script: "curl -s -u \$SONARQUBE_TOKEN: \$SONARQUBE_SERVER/api/qualitygates/project_status?projectKey=Java-Code", returnStdout: true).trim()

                        // Print the response for debugging
                        echo "Analysis ID Response: ${analysisIdResponse}"

                        // Parse the JSON response to get analysisId
                        def analysisId = readJSON text: analysisIdResponse

                        // Check if 'analysisId' is present in the response
                        if (analysisId && analysisId.analysisId) {
                            def qualityGateStatus = sh(script: "curl -s -u \$SONARQUBE_TOKEN: \$SONARQUBE_SERVER/api/qualitygates/project_status?analysisId=${analysisId.analysisId} | jq -r '.projectStatus.status'", returnStatus: true).trim()

                            if (qualityGateStatus == 'OK') {
                                echo 'Quality Gate passed - Proceeding to the next stage'
                            } else {
                                error "Quality Gate failed: ${qualityGateStatus}"
                            }
                        } else {
                            error "Failed to retrieve 'analysisId' from the SonarQube response."
                        }
                    }
                }
            }
            post {
                success {
                    // Only execute the next stage if Quality Gate passes
                    echo 'Quality Gate passed - Proceeding to the next stage'
                }
            }
        }

        stage('Java Package') {
            steps {
                script {
                    def mvn = tool 'Maven'
                    sh "${mvn}/bin/mvn package"
                }
            }
        }

        stage('Next Stage') {
            steps {
                echo 'Performing actions in the next stage...'
                // Your next stage steps here
            }
        }
    }
}
