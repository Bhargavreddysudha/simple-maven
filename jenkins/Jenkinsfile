pipeline {
    agent any

    environment {
        // Define the Git repository URL and branch
        GIT_REPO_URL = 'https://github.com/Bhargavreddysudha/simple-maven.git'
        GIT_BRANCH = 'main'
        SONARQUBE_SERVER = 'http://52.87.243.220:9000/'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from source control
                checkout([$class: 'GitSCM', 
                          branches: [[name: "*/${GIT_BRANCH}"]], 
                          userRemoteConfigs: [[url: "${GIT_REPO_URL}"]]])
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def mvn = tool 'Maven'
                    withSonarQubeEnv(credentialsId: 'Sonar-Jenkins') {
                        sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=Java-Code"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    def analysisId = sh(script: "curl -s -u \$(cat \${JENKINS_HOME}/secrets/sonarqube-token): $SONARQUBE_SERVER/api/qualitygates/project_status?analysisId=\$(curl -s -u \$(cat \${JENKINS_HOME}/secrets/sonarqube-token): $SONARQUBE_SERVER/api/qualitygates/project_status?projectKey=Java-Code | jq -r '.analysisId') | jq -r '.analysisId'", returnStatus: true).trim()
                    def qualityGateStatus = sh(script: "curl -s -u \$(cat \${JENKINS_HOME}/secrets/sonarqube-token): $SONARQUBE_SERVER/api/qualitygates/project_status?analysisId=$analysisId | jq -r '.projectStatus.status'", returnStatus: true).trim()

                    if (qualityGateStatus == 'OK') {
                        echo 'Quality Gate passed - Proceeding to the next stage'
                    } else {
                        error "Quality Gate failed: ${qualityGateStatus}"
                    }
                }
            }
        }

        stage('Java Package') {
            steps {
                script {
                    def mvn = tool 'Maven'
                    sh "${mvn}/bin/mvn package"
                }
            }
        }

        stage('Next Stage') {
            steps {
                // Your next stage steps here
                echo 'Performing actions in the next stage...'
            }
        }
    }

    // Add post-build actions or other configurations as needed
}
